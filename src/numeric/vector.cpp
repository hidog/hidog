#include "vector.h"

namespace	hidog
{
namespace	numeric
{




/************************************************************************************************************
	建構
*************************************************************************************************************/
template<class T>
vector<T>::vector()
{
	data	=	NULL;
	_size	=	0;
}


/************************************************************************************************************
	建構
*************************************************************************************************************/
template<class T>
vector<T>::vector( int _s )
{
	data	=	NULL;	// 為了檢察有沒有new成功

	_size	=	_s;
	data	=	new	T[_size];

	if( data == NULL )
		error_msg("error");
}


/************************************************************************************************************
	copy construct
*************************************************************************************************************/
template<class T>
vector<T>::vector( vector& v )
{
	data	=	NULL;	// 為了檢查有沒有 new 成功

	_size	=	v.size();
	data	=	new	T[_size];

	ErrorExceptionMacro( data != NULL );
	//if( data == NULL )
	//	error_msg("error");

	// copy
	for( int i = 0; i < _size; i++ )
		data[i]	=	v(i);
}



/************************************************************************************************************
	解構
*************************************************************************************************************/
template<class T>
vector<T>::~vector()
{
	delete	[]	data;
	data	=	NULL;
	_size	=	0;
}




/************************************************************************************************************
	清除資料
	釋放記憶體
*************************************************************************************************************/
template<class T>
void	vector<T>::destroy()
{
	delete	[]	data;
	data	=	NULL;
	_size	=	0;
}






/************************************************************************************************************
	重新取得記憶體空間
*************************************************************************************************************/
template<class T>
void	vector<T>::resize( int _s )
{
	destroy();
	
	_size	=	_s;
	data	=	new	T[_size];

	ErrorExceptionMacro( data != NULL );
	//if( data == NULL )
	//	error_msg("resize error.");
}



/************************************************************************************************************
	取得資料
*************************************************************************************************************/
template<class T>
T&	vector<T>::operator () ( int index )
{
	ErrorExceptionMacro( index < _size );
	//if( index >= _size )
	//	error_msg("index out of bound.");

	return	data[index];
}



/************************************************************************************************************
	取得資料
*************************************************************************************************************/
template<class T>
T&	vector<T>::operator [] ( int index )
{
	return	(*this)(index);
}



/************************************************************************************************************
	get size
*************************************************************************************************************/
template<class T>
int		vector<T>::size()
{
	return	_size;
}



/************************************************************************************************************
	複製 operator
*************************************************************************************************************/
template<class T>
vector<T>&	vector<T>::operator = ( vector<T>& v )
{
	int		i;

	delete	[]	data;
	data	=	NULL;

	_size	=	v.size();
	data	=	new	T[_size];

	ErrorExceptionMacro( data != NULL );

	for( i = 0; i < _size; i++ )
		data[i]	=	v(i);

	return	*this;
}






//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 非成員函數 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/************************************************************************************************************
	印出資料
*************************************************************************************************************/
template<class T>
void	print( vector<T>& vec )
{
	const int	size	=	vec.size();

	int		i;

	std::cout << "numeric vector size : " << size << std::endl;

	for( i = 0; i < size; i++ )
		//std::cout << vec(i) << " ";
		std::cout << "data[" << i << "] = " << vec(i) << std::endl;

	std::cout << "\n\n";
}





/************************************************************************************************************
	印出資料
	沒加 & 會有 error 
*************************************************************************************************************/
template<class T>
std::ostream&	operator << ( std::ostream &out, vector<T> &vec )
{
	const int	s	=	vec.size();

	int		i;

	out << "numeric vector size : " << s << "\n";

	for( i = 0; i < s; i++ )
		out << vec(i) << " ";
		//std::cout << "data[" << i << "] = " << vec(i) << std::endl;
	out << "\n\n";

	return	out;
}



/************************************************************************************************************
	加法 
*************************************************************************************************************/
template<class	T>
vector<T>&		operator +  ( vector<T> &a, vector<T> &b )
{
	ErrorExceptionMacro( a.size() == b.size() );

	const int	size	=	a.size();

	int		i;

	static	vector<T>	c;

	c.resize( size );

	for( i = 0; i < size; i++ )
		c(i)	=	a(i) + b(i);

	return	c;
}


/************************************************************************************************************
	減法
*************************************************************************************************************/
template<class	T>
vector<T>&		operator -  ( vector<T> &a, vector<T> &b )
{
	ErrorExceptionMacro( a.size() == b.size() );

	const int	size	=	a.size();

	int		i;

	static	vector<T>	c;

	c.resize(size);

	for( i = 0; i < size; i++ )
		c(i)	=	a(i) - b(i);

	return	c;
}


/************************************************************************************************************
	相等判斷 
*************************************************************************************************************/
template<class T>
bool	operator == ( vector<T> &a, vector<T> &b )
{
	ErrorExceptionMacro( a.size() == b.size() );

	const int	size	=	a.size();

	int		i;
	bool	is;

	is	=	true;
	for( i = 0; i < size; i++ )
	{
		if( a(i) != b(i) )
		{
			is	=	false;
			break;
		}
	}
	
	return	is;
}





}	// end namespace numeric
}	// end namespace hidog