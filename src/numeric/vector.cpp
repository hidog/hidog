#include "vector.h"

namespace	hidog
{
namespace	numeric
{




/************************************************************************************************************
	建構
*************************************************************************************************************/
template<class T>
vector<T>::vector()
{
	data	=	NULL;
	_size	=	0;
}


/************************************************************************************************************
	建構
*************************************************************************************************************/
template<class T>
vector<T>::vector( int _s )
{
	resize(_s);
}


/************************************************************************************************************
	copy construct
*************************************************************************************************************/
template<class T>
vector<T>::vector( vector& v )
{
	data	=	NULL;
	_size	=	0;

	resize(v.size());
	
	for( int i = 0; i < _size; i++ )
		data[i]	=	v(i);
}



/************************************************************************************************************
	解構
*************************************************************************************************************/
template<class T>
vector<T>::~vector()
{
	destroy();
}




/************************************************************************************************************
	清除資料
	釋放記憶體
*************************************************************************************************************/
template<class T>
void	vector<T>::destroy()
{
	delete	[]	data;
	data	=	NULL;
	_size	=	0;
}






/************************************************************************************************************
	重新取得記憶體空間
*************************************************************************************************************/
template<class T>
void	vector<T>::resize( int _s )
{
	destroy();
	
	_size	=	_s;
	data	=	new	T[_size];

	if( data == NULL )
		error_msg("resize error.");
}



/************************************************************************************************************
	取得資料
*************************************************************************************************************/
template<class T>
T&	vector<T>::operator () ( int index )
{
	if( index >= _size )
		error_msg("index out of bound.");

	return	data[index];
}



/************************************************************************************************************
	取得資料
*************************************************************************************************************/
template<class T>
T&	vector<T>::operator [] ( int index )
{
	return	(*this)(index);
}



/************************************************************************************************************
	get size
*************************************************************************************************************/
template<class T>
int		vector<T>::size()
{
	return	_size;
}









//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 非class內函數 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

/************************************************************************************************************
	印出資料
*************************************************************************************************************/
template<class T>
void	print( vector<T> vec )
{
	const int	size	=	vec.size();

	int		i;

	std::cout << "numeric vector size : " << size << std::endl;

	for( i = 0; i < size; i++ )
		std::cout << vec(i) << " ";
		//std::cout << "data[" << i << "] = " << vec(i) << std::endl;

	std::cout << "\n\n";
}


















}	// end namespace numeric
}	// end namespace hidog