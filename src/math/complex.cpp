#include "complex.h"







namespace	hidog
{
namespace	math
{



/*******************************************************************************************
	constructor
********************************************************************************************/
Complex::Complex()
{
			_real		=	0;
			_image	=	0;
}

/*******************************************************************************************
	destructor
********************************************************************************************/
Complex::~Complex()
{
			_real		=	0;
			_image	=	0;
}

/*******************************************************************************************
	constructor
********************************************************************************************/
Complex::Complex( double _r, double _i )
{
			_real		=	_r;
			_image	=	_i;
}





/*******************************************************************************************
	constructor
********************************************************************************************/
Complex::Complex( Complex &c )
{
			_real		=	c._real;
			_image	=	c._image;
}


#if defined(MAC_OS) || defined(LINUX)
/*******************************************************************************************
	constructor
********************************************************************************************/
Complex::Complex( const Complex &c )
{
			_real		=	c._real;
			_image	=	c._image;
}
#endif




/*******************************************************************************************
	取得 real part 可讀寫
********************************************************************************************/
double&	Complex::real()
{
	return	_real;
}




/*******************************************************************************************
	取得 image part 可讀寫
********************************************************************************************/
double&	Complex::image()
{
	return	_image;
}






// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ global function ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

/*******************************************************************************************
	<< operator
********************************************************************************************/
std::ostream&	operator << ( std::ostream &out, Complex c )
{
	out << c.real() << " + " << c.image() << "i ";
	
	return	out;
}


/*******************************************************************************************
	+ operator
********************************************************************************************/
Complex		operator + ( Complex a, Complex b )
{
	const double	real		=		a.real() + b.real();
	const double	image	=		a.image() + b.image(); 
	
	Complex		c( real, image );;
	
	return	c;
}



/*******************************************************************************************
	- operator
********************************************************************************************/
Complex		operator - ( Complex a, Complex b )
{
	const double	real		=		a.real() - b.real();
	const double	image	=		a.image() - b.image(); 
	
	Complex		c( real, image );;
	
	return	c;
}




/*******************************************************************************************
	* operator
********************************************************************************************/
Complex		operator * ( Complex a, Complex b )
{
	const double	real		=		a.real() * b.real() - a.image() * b.image();
	const double	image	=		a.real() * b.image() + a.image() * b.real();
	
	Complex		c( real, image );
	
	return	c;
}




/*******************************************************************************************
	/ operator 
********************************************************************************************/
Complex		operator / ( Complex a, Complex b )
{
	const double	den		=		b.real()*b.real() + b.image()*b.image();
	
	ErrorExceptionMacro( den != 0 );		// iff b is zero.
	
	const double	real		=		a.real() * b.real() + a.image() * b.image();
	const double	image	=		a.image() * b.real() - a.real() * b.image();
	
	Complex		c( real/den , image/den );
	
	return	c;
}





}	// end namespace math
}	// end namespace hidog
