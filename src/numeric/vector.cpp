#include "vector.h"

namespace	hidog
{
namespace	numeric
{




/************************************************************************************************************
	建構
*************************************************************************************************************/
template<class T>
vector<T>::vector()
{
	data	=	NULL;
	size	=	0;
}


/************************************************************************************************************
	建構
*************************************************************************************************************/
template<class T>
vector<T>::vector( int _size )
{
	resize(_size);
}



/************************************************************************************************************
	解構
*************************************************************************************************************/
template<class T>
vector<T>::~vector()
{
	destroy();
}




/************************************************************************************************************
	清除資料
	釋放記憶體
*************************************************************************************************************/
template<class T>
void	vector<T>::destroy()
{
	delete	[]	data;
	data	=	NULL;
	size	=	0;
}






/************************************************************************************************************
	重新取得記憶體空間
*************************************************************************************************************/
template<class T>
void	vector<T>::resize( int _size )
{
	destroy();
	
	size	=	_size;
	data	=	new	T[size];

	if( data == NULL )
		error_msg("resize error.");
}



/************************************************************************************************************
	取得資料
*************************************************************************************************************/
template<class T>
T&	vector<T>::operator () ( int index )
{
	if( index >= size )
		error_msg("index out of bound.");

	return	data[index];
}



/************************************************************************************************************
	取得資料
*************************************************************************************************************/
template<class T>
T&	vector<T>::operator [] ( int index )
{
	return	(*this)(index);
}




}	// end namespace numeric
}	// end namespace hidog